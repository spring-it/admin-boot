package ${package.Controller};

import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.GetMapping;
#if(${entityLombokModel})
import lombok.RequiredArgsConstructor;
#end
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
#if(${swagger2})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import springfox.documentation.annotations.ApiIgnore;
#end
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import cn.mesmile.admin.common.result.R;
import java.util.List;

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${swagger2})
@Api(value = "$!{table.comment}相关api",tags = {"$!{table.comment}相关api"})
#end
#if(${entityLombokModel})
@RequiredArgsConstructor
#end
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    private final ${table.serviceName} ${table.entityPath}Service;

    @ApiOperation("分页查询$!{table.comment}")
    @GetMapping("/get")
    @ApiImplicitParams({
            @ApiImplicitParam(value = "当前页",name = "current",defaultValue = "1"),
            @ApiImplicitParam(value = "每页显示条数",name = "size",defaultValue = "10"),
    })
    public R<Page<${entity}>> find${entity}Page(@ApiIgnore Page<${entity}> page){
        Page<${entity}> result = ${table.entityPath}Service.find${entity}Page(page);
        return R.data(result);
    }

    @PostMapping
    @ApiOperation("新增$!{table.comment}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${table.entityPath}", value = "${table.entityPath}对象的json数据")
    })
    public R save(@RequestBody ${entity} ${table.entityPath}){
        boolean save = ${table.entityPath}Service.save(${table.entityPath});
        return R.status(save);
    }

    @PostMapping("/update")
    @ApiOperation("修改$!{table.comment}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${table.entityPath}", value = "${table.entityPath}对象的json数据")
    })
    public R update(@RequestBody ${entity} ${table.entityPath}){
        boolean update = ${table.entityPath}Service.updateById(${table.entityPath});
        return R.status(update);
    }

    @ApiOperation("删除$!{table.comment}")
    @PostMapping("/delete")
    @ApiImplicitParams({
            @ApiImplicitParam(value = "多个id值",name = "ids"),
    })
    public R updateCoinType(@RequestBody List<String> ids){
        boolean delete = ${table.entityPath}Service.removeByIds(ids);
        return R.data(delete);
    }
}
#end
